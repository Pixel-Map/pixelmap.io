package utils

import (
	"bytes"
	"testing"
)

func TestDecompressTileCode(t *testing.T) {
	t.Run("successfully decodes a Pako compressed Base91 string", func(t *testing.T) {
		compressedImage := "b#I@Y8KucA>C=C$amO}}.yB\"wn7S4JMIgmxvTR#6?fMx89\"gv=Ng~)}w.FaSy63j:PAgZ@8klfYnduUCA4jNfEe#:d~OC(~3NJ}r8.$_>rsm*vE}W0z7i~b~UV&6IsQ&@3r2.|8gWFd=vky~Y.|ookg=<hy4>*c?k[j.4{j)D|Txq?Hkb9?cYSf"
		expected := "d84000000d84940000000000355355355355355134134355d84d84d849400001741742b5000355355134134355355355d84d84d849400001741742b50003553551341343553553559400000000001741741740006300000003553553553551340001741742b51740000006306300000001341341341341342b52b52b52b5174000000000c730000001341341341341342b52b52b52b5174000000000c730000001341341341341342b5174174174174000000c73c73000000466466466466466db1000000db1db1174174000c73000000466134134134355db1db1db1174174000000000000134134466355355355134db1db1db1174174000000000000134134466355355355134174174174000000900900000355134134466355355355355000000000900d50000000000134134134466355355355134000000000000000000000355355134134466134134134355000000000000000000000355355134134466134134134355000000000000134134134134134134134134134134134134"

		result, err := DecompressTileCode(compressedImage)
		if err != nil {
			t.Fatalf("DecompressTileCode failed: %v", err)
		}
		if result != expected {
			t.Errorf("Expected %s, but got %s", expected, result)
		}
	})

	t.Run("successfully decodes a regular hex triplet string with accidental whitespace", func(t *testing.T) {
		compressedImage := "  000000000000000000000000000000000000000000000000000000000000000000022ffffff022000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000fff022022fff000000000000000000000000000000000000a75ffffffa75000000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022764c97c97764022000000000000000000000000000000a75355566566355a75000000000000000000000000000000a75a75022022a75a75000000000000000000000022466466fff022ceecee022fff4664660000000000000000220220220220a00a00a00a0022022022000000000000000022466466022ceeceeceecee022466466000000000000000000022022fff700700700700fff022022000000000000000000022022000022022022022000022022000000000000000000000000000000000000000000000000000000000"
		expected := "000000000000000000000000000000000000000000000000000000000000000000022ffffff022000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000fff022022fff000000000000000000000000000000000000a75ffffffa75000000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022764c97c97764022000000000000000000000000000000a75355566566355a75000000000000000000000000000000a75a75022022a75a75000000000000000000000022466466fff022ceecee022fff4664660000000000000000220220220220a00a00a00a0022022022000000000000000022466466022ceeceeceecee022466466000000000000000000022022fff700700700700fff022022000000000000000000022022000022022022022000022022000000000000000000000000000000000000000000000000000000000"

		result, err := DecompressTileCode(compressedImage)
		if err != nil {
			t.Fatalf("DecompressTileCode failed: %v", err)
		}
		if result != expected {
			t.Errorf("Expected %s, but got %s", expected, result)
		}
	})
}

func TestDecodeBase91(t *testing.T) {
	t.Run("correctly decodes a base91 encoded string", func(t *testing.T) {
		encodedString := "fPNKd"
		expectedDecodedArray := []byte{116, 101, 115, 116}

		result, err := DecodeBase91(encodedString)
		if err != nil {
			t.Fatalf("DecodeBase91 failed: %v", err)
		}
		if !bytes.Equal(result, expectedDecodedArray) {
			t.Errorf("Expected %v, but got %v", expectedDecodedArray, result)
		}
	})

	t.Run("returns an empty slice for an empty string", func(t *testing.T) {
		encodedString := ""

		result, err := DecodeBase91(encodedString)
		if err != nil {
			t.Fatalf("DecodeBase91 failed: %v", err)
		}
		if len(result) != 0 {
			t.Errorf("Expected empty slice, but got %v", result)
		}
	})

	t.Run("does not throw an error for invalid base91 input", func(t *testing.T) {
		invalidEncodedString := "!@#$%^&*()"

		_, err := DecodeBase91(invalidEncodedString)
		if err != nil {
			t.Errorf("Expected no error, but got: %v", err)
		}
	})
}
