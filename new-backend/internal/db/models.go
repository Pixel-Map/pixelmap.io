// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type StateToTrack string

const (
	StateToTrackINGESTIONLASTPROCESSEDPIXELMAPTX     StateToTrack = "INGESTION_LAST_PROCESSED_PIXEL_MAP_TX"
	StateToTrackINGESTIONLASTETHERSCANBLOCK          StateToTrack = "INGESTION_LAST_ETHERSCAN_BLOCK"
	StateToTrackNOTIFICATIONSLASTPROCESSEDTILECHANGE StateToTrack = "NOTIFICATIONS_LAST_PROCESSED_TILE_CHANGE"
	StateToTrackRENDERERLASTPROCESSEDDATACHANGE      StateToTrack = "RENDERER_LAST_PROCESSED_DATA_CHANGE"
)

func (e *StateToTrack) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StateToTrack(s)
	case string:
		*e = StateToTrack(s)
	default:
		return fmt.Errorf("unsupported scan type for StateToTrack: %T", src)
	}
	return nil
}

type NullStateToTrack struct {
	StateToTrack StateToTrack `json:"state_to_track"`
	Valid        bool         `json:"valid"` // Valid is true if StateToTrack is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStateToTrack) Scan(value interface{}) error {
	if value == nil {
		ns.StateToTrack, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StateToTrack.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStateToTrack) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StateToTrack), nil
}

type CurrentState struct {
	State StateToTrack `json:"state"`
	Value int64        `json:"value"`
}

type DataHistory struct {
	ID          int32     `json:"id"`
	TimeStamp   time.Time `json:"time_stamp"`
	BlockNumber int64     `json:"block_number"`
	Tx          string    `json:"tx"`
	LogIndex    int32     `json:"log_index"`
	Image       string    `json:"image"`
	Price       string    `json:"price"`
	Url         string    `json:"url"`
	UpdatedBy   string    `json:"updated_by"`
	TileID      int32     `json:"tile_id"`
}

type PixelMapTransaction struct {
	ID                int32          `json:"id"`
	BlockNumber       int64          `json:"block_number"`
	TimeStamp         time.Time      `json:"time_stamp"`
	Hash              string         `json:"hash"`
	Nonce             int64          `json:"nonce"`
	BlockHash         string         `json:"block_hash"`
	TransactionIndex  int32          `json:"transaction_index"`
	From              string         `json:"from"`
	To                string         `json:"to"`
	Value             string         `json:"value"`
	Gas               int64          `json:"gas"`
	GasPrice          int64          `json:"gas_price"`
	IsError           bool           `json:"is_error"`
	TxreceiptStatus   sql.NullBool   `json:"txreceipt_status"`
	Input             string         `json:"input"`
	ContractAddress   sql.NullString `json:"contract_address"`
	CumulativeGasUsed int64          `json:"cumulative_gas_used"`
	GasUsed           int64          `json:"gas_used"`
	Confirmations     int64          `json:"confirmations"`
}

type PurchaseHistory struct {
	ID          int32     `json:"id"`
	TimeStamp   time.Time `json:"time_stamp"`
	BlockNumber int64     `json:"block_number"`
	Tx          string    `json:"tx"`
	LogIndex    int32     `json:"log_index"`
	SoldBy      string    `json:"sold_by"`
	PurchasedBy string    `json:"purchased_by"`
	Price       string    `json:"price"`
	TileID      int32     `json:"tile_id"`
}

type Tile struct {
	ID           int32  `json:"id"`
	Image        string `json:"image"`
	Price        string `json:"price"`
	Url          string `json:"url"`
	Owner        string `json:"owner"`
	Wrapped      bool   `json:"wrapped"`
	Ens          string `json:"ens"`
	OpenseaPrice string `json:"opensea_price"`
}

type TransferHistory struct {
	ID              int32     `json:"id"`
	TimeStamp       time.Time `json:"time_stamp"`
	BlockNumber     int64     `json:"block_number"`
	Tx              string    `json:"tx"`
	LogIndex        int32     `json:"log_index"`
	TransferredFrom string    `json:"transferred_from"`
	TransferredTo   string    `json:"transferred_to"`
	TileID          int32     `json:"tile_id"`
}

type WrappingHistory struct {
	ID          int32     `json:"id"`
	TimeStamp   time.Time `json:"time_stamp"`
	BlockNumber int64     `json:"block_number"`
	Tx          string    `json:"tx"`
	LogIndex    int32     `json:"log_index"`
	Wrapped     bool      `json:"wrapped"`
	UpdatedBy   string    `json:"updated_by"`
	TileID      int32     `json:"tile_id"`
}
