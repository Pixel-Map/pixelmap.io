// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getCurrentState = `-- name: GetCurrentState :one
SELECT state, value FROM current_states
WHERE state = $1 LIMIT 1
`

func (q *Queries) GetCurrentState(ctx context.Context, state StateToTrack) (CurrentState, error) {
	row := q.db.QueryRowContext(ctx, getCurrentState, state)
	var i CurrentState
	err := row.Scan(&i.State, &i.Value)
	return i, err
}

const getLatestBlockNumber = `-- name: GetLatestBlockNumber :one
SELECT COALESCE(MAX(block_number), 0) FROM pixel_map_transactions
`

func (q *Queries) GetLatestBlockNumber(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getLatestBlockNumber)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const insertPixelMapTransaction = `-- name: InsertPixelMapTransaction :one
INSERT INTO pixel_map_transactions (
    block_number, time_stamp, hash, nonce, block_hash, transaction_index,
    "from", "to", value, gas, gas_price, is_error, txreceipt_status,
    input, contract_address, cumulative_gas_used, gas_used, confirmations
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
)
RETURNING id
`

type InsertPixelMapTransactionParams struct {
	BlockNumber       int64          `json:"block_number"`
	TimeStamp         time.Time      `json:"time_stamp"`
	Hash              string         `json:"hash"`
	Nonce             int64          `json:"nonce"`
	BlockHash         string         `json:"block_hash"`
	TransactionIndex  int32          `json:"transaction_index"`
	From              string         `json:"from"`
	To                string         `json:"to"`
	Value             string         `json:"value"`
	Gas               int64          `json:"gas"`
	GasPrice          int64          `json:"gas_price"`
	IsError           bool           `json:"is_error"`
	TxreceiptStatus   sql.NullBool   `json:"txreceipt_status"`
	Input             string         `json:"input"`
	ContractAddress   sql.NullString `json:"contract_address"`
	CumulativeGasUsed int64          `json:"cumulative_gas_used"`
	GasUsed           int64          `json:"gas_used"`
	Confirmations     int64          `json:"confirmations"`
}

func (q *Queries) InsertPixelMapTransaction(ctx context.Context, arg InsertPixelMapTransactionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertPixelMapTransaction,
		arg.BlockNumber,
		arg.TimeStamp,
		arg.Hash,
		arg.Nonce,
		arg.BlockHash,
		arg.TransactionIndex,
		arg.From,
		arg.To,
		arg.Value,
		arg.Gas,
		arg.GasPrice,
		arg.IsError,
		arg.TxreceiptStatus,
		arg.Input,
		arg.ContractAddress,
		arg.CumulativeGasUsed,
		arg.GasUsed,
		arg.Confirmations,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateCurrentState = `-- name: UpdateCurrentState :exec
INSERT INTO current_states (state, value)
VALUES ($1, $2)
ON CONFLICT (state) DO UPDATE
SET value = EXCLUDED.value
`

type UpdateCurrentStateParams struct {
	State StateToTrack `json:"state"`
	Value int64        `json:"value"`
}

func (q *Queries) UpdateCurrentState(ctx context.Context, arg UpdateCurrentStateParams) error {
	_, err := q.db.ExecContext(ctx, updateCurrentState, arg.State, arg.Value)
	return err
}
