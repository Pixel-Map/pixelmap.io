import { decompressTileCode } from "./decompressTileCode";
import { decodeBase91 } from "./decompressTileCode";

it("successfully decodes a Pako compressed Base91 string", async () => {
	const compressedImage =
		// eslint-disable-next-line max-len
		'b#I@Y8KucA>C=C$amO}}.yB"wn7S4JMIgmxvTR#6?fMx89"gv=Ng~)}w.FaSy63j:PAgZ@8klfYnduUCA4jNfEe#:d~OC(~3NJ}r8.$_>rsm*vE}W0z7i~b~UV&6IsQ&@3r2.|8gWFd=vky~Y.|ookg=<hy4>*c?k[j.4{j)D|Txq?Hkb9?cYSf';
	expect(decompressTileCode(compressedImage)).toBe(
		// eslint-disable-next-line max-len
		"d84000000d84940000000000355355355355355134134355d84d84d849400001741742b5000355355134134355355355d84d84d849400001741742b50003553551341343553553559400000000001741741740006300000003553553553551340001741742b51740000006306300000001341341341341342b52b52b52b5174000000000c730000001341341341341342b52b52b52b5174000000000c730000001341341341341342b5174174174174000000c73c73000000466466466466466db1000000db1db1174174000c73000000466134134134355db1db1db1174174000000000000134134466355355355134db1db1db1174174000000000000134134466355355355134174174174000000900900000355134134466355355355355000000000900d50000000000134134134466355355355134000000000000000000000355355134134466134134134355000000000000000000000355355134134466134134134355000000000000134134134134134134134134134134134134",
	);
});

it("successfully decodes a regular hex triplet string with accidental whitespace", async () => {
	const compressedImage =
		// eslint-disable-next-line max-len
		"  000000000000000000000000000000000000000000000000000000000000000000022ffffff022000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000fff022022fff000000000000000000000000000000000000a75ffffffa75000000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022764c97c97764022000000000000000000000000000000a75355566566355a75000000000000000000000000000000a75a75022022a75a75000000000000000000000022466466fff022ceecee022fff4664660000000000000000220220220220a00a00a00a0022022022000000000000000022466466022ceeceeceecee022466466000000000000000000022022fff700700700700fff022022000000000000000000022022000022022022022000022022000000000000000000000000000000000000000000000000000000000";
	expect(decompressTileCode(compressedImage)).toBe(
		// eslint-disable-next-line max-len
		"000000000000000000000000000000000000000000000000000000000000000000022ffffff022000000000000000000000000000000000000ffffffffffff000000000000000000000000000000000000fff022022fff000000000000000000000000000000000000a75ffffffa75000000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022da8da8da8da8022000000000000000000000000000000022764c97c97764022000000000000000000000000000000a75355566566355a75000000000000000000000000000000a75a75022022a75a75000000000000000000000022466466fff022ceecee022fff4664660000000000000000220220220220a00a00a00a0022022022000000000000000022466466022ceeceeceecee022466466000000000000000000022022fff700700700700fff022022000000000000000000022022000022022022022000022022000000000000000000000000000000000000000000000000000000000",
	);
});
describe("decodeBase91", () => {
	it("correctly decodes a base91 encoded string", () => {
		// Arrange
		const encodedString = "fPNKd";
		const expectedDecodedArray = Buffer.from([116, 101, 115, 116]);

		// Act
		const result = decodeBase91(encodedString);

		// Assert
		expect(Buffer.isBuffer(result)).toBe(true);
		expect(result).toEqual(expectedDecodedArray);
	});

	it("returns an empty Buffer for an empty string", () => {
		// Arrange
		const encodedString = "";

		// Act
		const result = decodeBase91(encodedString);

		// Assert
		expect(Buffer.isBuffer(result)).toBe(true);
		expect(result).toEqual(Buffer.alloc(0));
	});

	it("does not throw an error for invalid base91 input", () => {
		// Arrange
		const invalidEncodedString = "!@#$%^&*()";

		// Act & Assert
		expect(() => decodeBase91(invalidEncodedString)).not.toThrow();
	});
});
